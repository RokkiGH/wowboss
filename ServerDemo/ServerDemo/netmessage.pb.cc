// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "netmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace wowboss {

namespace {

const ::google::protobuf::Descriptor* NMHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NMHello_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetMessage_MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_netmessage_2eproto() {
  protobuf_AddDesc_netmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "netmessage.proto");
  GOOGLE_CHECK(file != NULL);
  NMHello_descriptor_ = file->message_type(0);
  static const int NMHello_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMHello, version_),
  };
  NMHello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NMHello_descriptor_,
      NMHello::default_instance_,
      NMHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMHello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMHello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NMHello));
  NetMessage_descriptor_ = file->message_type(1);
  static const int NetMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessage, hello_),
  };
  NetMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetMessage_descriptor_,
      NetMessage::default_instance_,
      NetMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetMessage));
  NetMessage_MessageType_descriptor_ = NetMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_netmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NMHello_descriptor_, &NMHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetMessage_descriptor_, &NetMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_netmessage_2eproto() {
  delete NMHello::default_instance_;
  delete NMHello_reflection_;
  delete NetMessage::default_instance_;
  delete NetMessage_reflection_;
}

void protobuf_AddDesc_netmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020netmessage.proto\022\007wowboss\"\032\n\007NMHello\022\017"
    "\n\007version\030\001 \002(\005\"t\n\nNetMessage\022+\n\002id\030\001 \002("
    "\0162\037.wowboss.NetMessage.MessageType\022\037\n\005he"
    "llo\030\002 \001(\0132\020.wowboss.NMHello\"\030\n\013MessageTy"
    "pe\022\t\n\005HELLO\020\000", 173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "netmessage.proto", &protobuf_RegisterTypes);
  NMHello::default_instance_ = new NMHello();
  NetMessage::default_instance_ = new NetMessage();
  NMHello::default_instance_->InitAsDefaultInstance();
  NetMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_netmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_netmessage_2eproto {
  StaticDescriptorInitializer_netmessage_2eproto() {
    protobuf_AddDesc_netmessage_2eproto();
  }
} static_descriptor_initializer_netmessage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int NMHello::kVersionFieldNumber;
#endif  // !_MSC_VER

NMHello::NMHello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NMHello::InitAsDefaultInstance() {
}

NMHello::NMHello(const NMHello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NMHello::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NMHello::~NMHello() {
  SharedDtor();
}

void NMHello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NMHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NMHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NMHello_descriptor_;
}

const NMHello& NMHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();  return *default_instance_;
}

NMHello* NMHello::default_instance_ = NULL;

NMHello* NMHello::New() const {
  return new NMHello;
}

void NMHello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NMHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NMHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NMHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NMHello::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NMHello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NMHello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NMHello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NMHello::MergeFrom(const NMHello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NMHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NMHello::CopyFrom(const NMHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NMHello::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NMHello::Swap(NMHello* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NMHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NMHello_descriptor_;
  metadata.reflection = NMHello_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetMessage_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetMessage_MessageType_descriptor_;
}
bool NetMessage_MessageType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetMessage_MessageType NetMessage::HELLO;
const NetMessage_MessageType NetMessage::MessageType_MIN;
const NetMessage_MessageType NetMessage::MessageType_MAX;
const int NetMessage::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetMessage::kIdFieldNumber;
const int NetMessage::kHelloFieldNumber;
#endif  // !_MSC_VER

NetMessage::NetMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetMessage::InitAsDefaultInstance() {
  hello_ = const_cast< ::wowboss::NMHello*>(&::wowboss::NMHello::default_instance());
}

NetMessage::NetMessage(const NetMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  hello_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetMessage::~NetMessage() {
  SharedDtor();
}

void NetMessage::SharedDtor() {
  if (this != default_instance_) {
    delete hello_;
  }
}

void NetMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetMessage_descriptor_;
}

const NetMessage& NetMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();  return *default_instance_;
}

NetMessage* NetMessage::default_instance_ = NULL;

NetMessage* NetMessage::New() const {
  return new NetMessage;
}

void NetMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_hello()) {
      if (hello_ != NULL) hello_->::wowboss::NMHello::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .wowboss.NetMessage.MessageType id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::wowboss::NetMessage_MessageType_IsValid(value)) {
            set_id(static_cast< ::wowboss::NetMessage_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hello;
        break;
      }
      
      // optional .wowboss.NMHello hello = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hello:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hello()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .wowboss.NetMessage.MessageType id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }
  
  // optional .wowboss.NMHello hello = 2;
  if (has_hello()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hello(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .wowboss.NetMessage.MessageType id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }
  
  // optional .wowboss.NMHello hello = 2;
  if (has_hello()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hello(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .wowboss.NetMessage.MessageType id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
    }
    
    // optional .wowboss.NMHello hello = 2;
    if (has_hello()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hello());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetMessage::MergeFrom(const NetMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hello()) {
      mutable_hello()->::wowboss::NMHello::MergeFrom(from.hello());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetMessage::CopyFrom(const NetMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_hello()) {
    if (!this->hello().IsInitialized()) return false;
  }
  return true;
}

void NetMessage::Swap(NetMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hello_, other->hello_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetMessage_descriptor_;
  metadata.reflection = NetMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wowboss

// @@protoc_insertion_point(global_scope)
